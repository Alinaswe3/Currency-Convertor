#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Aug 01, 2021 07:26:24 PM CAT  platform: Windows NT

import sys
import json
import requests as rq
from cryptography.fernet import Fernet
import os
import pyperclip as cp
import tkinter.messagebox as msg


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def set_Tk_var():
    global from_currencies
    from_currencies = tk.StringVar()
    global to_currencies
    to_currencies = tk.StringVar()
    global amount_entered
    amount_entered = tk.StringVar()
    amount_entered.set('0')
    global convert_var
    convert_var = tk.StringVar()
    convert_var.set('0')
    global requests_var
    requests_var = tk.IntVar()
    global check
    check = internet_test()
    global results
    results = retrieve_data(check)


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    root.iconbitmap('icon.ico')
    w.amount_entry.focus()
    message_display(check, results)
    populate(w, results)


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None
    
#----------------Additional functions to software---------------

# internet connection test------------------------

def internet_test():
    '''This function tests if computer has internet connection'''
    
    #reliable websites
    sites = ['https://www.google.com/',
             'https://www.wikipedia.org/',
             'https://www.microsoft.com/en-us/?ql=6'
             ]
    #max timeout
    max_timeout = 10
    
    #testing connections
    for site in sites:
        try:
            rq.get(site, timeout=max_timeout)
            return True
        except:
            pass
    return False

# retrieving data from the web---------------------------------

def retrieve_data(check):
    '''This function updates and gives data about currencies'''
    
    #the api key
    key = get_key()
    
    #update database if internet connection is available
    if check:
        with open('currencies_data.txt', 'w') as data:
            site = 'https://api.currencyfreaks.com/latest?apikey='+key
            response = rq.get(site)
            results = response.json()
            data.write(json.dumps(results))
        
        return results
    
    else:
        with open('currencies_data.txt', 'r') as data:
            data_from_file = data.read()
            results = json.loads(data_from_file)
            
        return results

# displaying message to user------------------------------------

def message_display(check, results):
    '''displays message to user about internet connection'''
    
    #last update
    date = results['date']
    
    #connection available
    #display date of update, and update info as message to user
    
    
    if check:
        msg.showinfo('Update',
                     'Internet connection available\nCurrency data will be updated\nNote: Update uses less than 1MB of data')
        
    else:
        #last update
        date = results['date']
        msg.showwarning('Warning',
                        f'No Internet connection\nCurrency data used will be based on your last update on {date[:10]}')
    
    #advising to check document with all iso codes of currencies
    msg.showinfo('Reference',
                 'For any reference on currency ISO code\nCheck document named "ISO Codes" in folder containing app')

# Populate combo-boxes-----------------------------------------

def populate(parent, results):
    '''Fucntion populates both combo-boxes'''
    
    #the dictionary
    currencies = results['rates']
    
    #the list that has all keys of results dictionary
    keys = []

    #populating the keys list
    for currency in currencies.keys():
        keys.append(currency)
        
    #adding the US dollar
    #keys.append('USD')
    
    #sorting the keys
    keys.sort()
        
    #adding the keys to the combo-boxes
    parent.from_drop_box['values'] = tuple(keys)
    parent.to_drop_box['values'] = tuple(keys)
    
    #setting the default values
    parent.from_drop_box.current(226)
    parent.to_drop_box.current(200)
    
    #making the combo-boxes readonly
    parent.from_drop_box.configure(state='readonly')
    parent.to_drop_box.configure(state='readonly')
    
    
# calculate currency conversions--------------------------------
# the main function of the application--------------------------

def convert():
    '''Function that converts one currency to the other'''
    
    #getting values the amount, from_currency, and to currency
    
    #error inspection
    try:
        amount = float(amount_entered.get())
        if amount < 0:
            msg.showerror('Error',
                          'Please enter positive numbers only\nFor example: 200, 0.5, 8')
            return
    except:
        
        #displaying error message to user for wrong inputs
        msg.showerror('Error',
                      'Please enter positive numbers only\nFor example: 26, 0.5, 4')
        
        #setting 0 as the default value
        amount_entered.set('0')
        #and haulting function execution
        return
    
    #getting the amount entered
    amount = float(amount_entered.get())
    
    #getting currency values and converting---------------------
    
    #from currency
    from_currency = from_currencies.get()
    
    #to currency
    to_currency = to_currencies.get()
    
    #rates with USD
    rates = results['rates']
    
    #if selected currencies are equal
    if from_currency == to_currency:
        #the amount and converted are the same
        convert_var.set(str(amount))
        
    elif from_currency == 'USD':
        #the converted amount is the inverse of its value
        to_value = float(rates[to_currency])
        converted = to_value * amount
        convert_var.set(str(round(converted, 4)))
        
    elif to_currency == 'USD':
        #its ratio with the USD is the converted
        usd_value = float(rates[from_currency])
        converted = amount/usd_value
        converted = round(converted, 4)
        convert_var.set(str(converted))
        
    else:
        #for all other conversions
        from_value = float(rates[from_currency])
        to_value = float(rates[to_currency])
        
        #the conversion equation
        converted = (amount * to_value)/from_value
        converted = round(converted, 4)
        
        #setting the converted var label
        convert_var.set(str(converted))
    
    #making sure the function starts all over
    return
    

# copying the converted amount----------------------------------

def copy():
    '''This function copies what ever value is in the converted
    label to clipboard'''
    
    #temporal storing of whats converted
    to_copy = float(convert_var.get())
    
    #making sure we copy a value only
    if to_copy <= 0:
        #trying to copy 0 error
        msg.showwarning('No Value error',
                        'No acceptable value has been converted yet\ne.g 0.0, 0.00000')
    else:
        #copying the accepted value
        cp.copy(to_copy)
        #showing a successful copy
        msg.showinfo('Success',
                     'Value has been copied to clipboard successfully')



# cryptography class--------------------------------------------

class Crypto(object):
    '''This is a class that will encrypt and decrypt
    the api key'''
    
    def __init__(self):
        '''Storing the given api key'''
        self._k_e_y_ = None
    
    def set_key(self):
        '''generates and saves the crypto key'''
        
        #generating a crypto key
        self._k_e_y_ = Fernet.generate_key()
            
        #saving generated key to a file
        with open('kyrc.key', 'wb') as key_file:
            key_file.write(self._k_e_y_)
        
        return self._k_e_y_
        
    def encrypto(self, file_name, save_name):
        '''Encrypting the given api key to a file'''
        
        #generating an encryption key
        key = self.set_key()
        
        #opening the file to encrypt
        with open(file_name, 'rb') as file:
            data = file.read()
        
        #creating a fernet object
        fernet = Fernet(key)
        
        #encrypting the file
        to_be_saved = fernet.encrypt(data)
        
        #saving the encrypted file
        with open(save_name, 'wb') as file:
            file.write(to_be_saved)
        
        #deleting the original file
        os.remove(file_name)
        

    
    def decrypto(self, save_name, key_name):
        '''Function that decrypts the encrypted apikey and 
        returns it'''
    
        #opening the file with key
        with open(key_name, 'rb') as enc_key:
            key = enc_key.read()
        
        #reading the encrypted file
        with open(save_name, 'rb') as enc_file:
            file = enc_file.read()
        
        #initialize a fernet object
        fernet = Fernet(key)
        
        #decrypting 
        dec_apikey = fernet.decrypt(file)
        
        #converting to string from bytes
        dec_apikey = dec_apikey.decode('utf-8')
        
        #returning the api key
        return dec_apikey

def info_crypto():
    '''Function gets username and api key from a file made by
    info_window and then encrypts it'''
    
    #opening the name_file
    with open('name.txt', 'r') as name_file:
        name = name_file.read()
    
    #deleting the temporal name file
    os.remove('name.txt')

    #encrypting the file---------------------------------------
    
    #create a crypto object first
    crypto = Crypto()
    
    #calling encrypto on the object for encryption
    crypto.encrypto('key_file', name)
    
    #creating a file that will determine whether this step
    #was passed and stores the name with API key
    with open('startup_account', 'w') as file:
        file.write(name)

# Getting the key from the encrypted file-----------------------

def get_key():
    '''This Function returns the decrypted key from where 
    its saved'''
    
    #creating a crypto object
    crypto = Crypto()
    
    #openning the file containing the name where key is saved to
    with open('startup_account', 'r') as file:
        key_file = file.read()
        
    #calling decrypto for decryption
    key = crypto.decrypto(key_file, 'kyrc.key')
    
    #returning the key
    return key
    
# the reset button----------------------------------------------

def reset():
    '''Function resets the users Name and API key'''
    
    #making user is sure of resetting
    response = msg.askyesno('Reset Settings',
                            'Are you sure you want to RESET your\nUsername and API key?')
    
    #deleting if sure
    if response:
        #first open startup to get name of user
        with open('startup_account', 'r') as file:
            name = file.read()
        
        #deleting startup and file with key
        os.remove('startup_account')
        os.remove(name)
        
        msg.showinfo('RESET',
                     'Reset has been successful\nPlease restart the program')
        destroy_window()

    else:
        #close window
        pass
        
                      
#------------------End of Additional Functions------------------

if __name__ == '__main__':
    #to prevent closure exceptions, try/except clause will be
    #used when open files. If exception arises window, wont
    #start, that is the Ace_currency_convertor window
    try:
        if os.path.exists('startup_account'):    
            import Ace_currency_convertor
            Ace_currency_convertor.vp_start_gui()
        else:
            import Info_window, Ace_currency_convertor
            Info_window.vp_start_gui()
            info_crypto()
            Ace_currency_convertor.vp_start_gui()
    except:
        #preventing windows to start if exception arises
        sys.exit()
        


