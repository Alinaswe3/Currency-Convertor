#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Aug 01, 2021 07:26:30 PM CAT  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Ace_currency_convertor_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    Ace_currency_convertor_support.set_Tk_var()
    top = main_window (root)
    Ace_currency_convertor_support.init(root, top)
    root.mainloop()

w = None
def create_main_window(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_main_window(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    Ace_currency_convertor_support.set_Tk_var()
    top = main_window (w)
    Ace_currency_convertor_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_main_window():
    global w
    w.destroy()
    w = None

class main_window:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("530x290+417+217")
        top.minsize(120, 1)
        top.maxsize(2736, 749)
        top.resizable(0,  0)
        top.title("ACE Currency Convertor")
        top.configure(background="#107aef")

        self.from_drop_box = ttk.Combobox(top)
        self.from_drop_box.place(relx=0.113, rely=0.655, relheight=0.103
                , relwidth=0.283)
        self.from_drop_box.configure(font="-family {Calibri} -size 14 -weight bold")
        self.from_drop_box.configure(textvariable=Ace_currency_convertor_support.from_currencies)
        self.from_drop_box.configure(foreground="#000000")
        self.from_drop_box.configure(takefocus="")
        self.tooltip_font = "TkDefaultFont"
        self.from_drop_box_tooltip = \
        ToolTip(self.from_drop_box, self.tooltip_font, '''Select a currency to convert FROM''')

        self.to_drop_box = ttk.Combobox(top)
        self.to_drop_box.place(relx=0.623, rely=0.655, relheight=0.103
                , relwidth=0.283)
        self.to_drop_box.configure(font="-family {Calibri} -size 14 -weight bold")
        self.to_drop_box.configure(textvariable=Ace_currency_convertor_support.to_currencies)
        self.to_drop_box.configure(foreground="#000000")
        self.to_drop_box.configure(takefocus="")
        self.tooltip_font = "TkDefaultFont"
        self.to_drop_box_tooltip = \
        ToolTip(self.to_drop_box, self.tooltip_font, '''Select a currency to convert TO''')

        self.from_label = ttk.Label(top)
        self.from_label.place(relx=0.113, rely=0.552, height=29, width=65)
        self.from_label.configure(background="#107aef")
        self.from_label.configure(foreground="#ffffff")
        self.from_label.configure(font="-family {Calibri} -size 14 -weight bold")
        self.from_label.configure(relief="flat")
        self.from_label.configure(anchor='w')
        self.from_label.configure(justify='left')
        self.from_label.configure(text='''FROM''')

        self.to_label = ttk.Label(top)
        self.to_label.place(relx=0.623, rely=0.552, height=29, width=35)
        self.to_label.configure(background="#107aef")
        self.to_label.configure(foreground="#ffffff")
        self.to_label.configure(font="-family {Calibri} -size 14 -weight bold")
        self.to_label.configure(relief="flat")
        self.to_label.configure(anchor='w')
        self.to_label.configure(justify='left')
        self.to_label.configure(text='''TO''')

        self.ace_tech_logo = ttk.Label(top)
        self.ace_tech_logo.place(relx=0.019, rely=0.034, height=29, width=85)
        self.ace_tech_logo.configure(background="#107aef")
        self.ace_tech_logo.configure(foreground="#ffffff")
        self.ace_tech_logo.configure(font="-family {Nirmala UI} -size 14 -weight bold")
        self.ace_tech_logo.configure(relief="flat")
        self.ace_tech_logo.configure(anchor='w')
        self.ace_tech_logo.configure(justify='left')
        self.ace_tech_logo.configure(text='''ACE Tech''')

        self.amount_entry = tk.Entry(top)
        self.amount_entry.place(relx=0.113, rely=0.31, height=30, relwidth=0.328)

        self.amount_entry.configure(background="white")
        self.amount_entry.configure(disabledforeground="#a3a3a3")
        self.amount_entry.configure(font="-family {Calibri} -size 14 -weight bold")
        self.amount_entry.configure(foreground="#000000")
        self.amount_entry.configure(insertbackground="black")
        self.amount_entry.configure(textvariable=Ace_currency_convertor_support.amount_entered)
        self.tooltip_font = "TkDefaultFont"
        self.amount_entry_tooltip = \
        ToolTip(self.amount_entry, self.tooltip_font, '''Enter the amount to convert FROM''')

        self.converted_amount = ttk.Label(top)
        self.converted_amount.place(relx=0.575, rely=0.31, height=29, width=185)
        self.converted_amount.configure(background="#ffffff")
        self.converted_amount.configure(foreground="#000000")
        self.converted_amount.configure(font="-family {Calibri} -size 14 -weight bold")
        self.converted_amount.configure(relief="flat")
        self.converted_amount.configure(anchor='w')
        self.converted_amount.configure(justify='left')
        self.converted_amount.configure(textvariable=Ace_currency_convertor_support.convert_var)
        self.tooltip_font = "TkDefaultFont"
        self.converted_amount_tooltip = \
        ToolTip(self.converted_amount, self.tooltip_font, '''The amount converted TO''')

        self.amount_label = ttk.Label(top)
        self.amount_label.place(relx=0.113, rely=0.207, height=29, width=105)
        self.amount_label.configure(background="#107aef")
        self.amount_label.configure(foreground="#ffffff")
        self.amount_label.configure(font="-family {Calibri} -size 14 -weight bold")
        self.amount_label.configure(relief="flat")
        self.amount_label.configure(anchor='w')
        self.amount_label.configure(justify='left')
        self.amount_label.configure(text='''AMOUNT''')
        self.amount_label.configure(cursor="fleur")

        self.converted_label = ttk.Label(top)
        self.converted_label.place(relx=0.575, rely=0.207, height=29, width=110)
        self.converted_label.configure(background="#107aef")
        self.converted_label.configure(foreground="#ffffff")
        self.converted_label.configure(font="-family {Calibri} -size 14 -weight bold")
        self.converted_label.configure(relief="flat")
        self.converted_label.configure(anchor='w')
        self.converted_label.configure(justify='left')
        self.converted_label.configure(text='''CONVERTED''')
        
# Widgets added by myself======================================

# convert, copy, reset buttons---------------------------------
        
        #convert button
        self.convert_button = tk.Button(top)
        self.convert_button.place(height=33, width=115, relx=0.400, rely=0.810)
        self.convert_button.configure(activebackground="#107aef")
        self.convert_button.configure(activeforeground="#ffffff")
        self.convert_button.configure(background="#107aef")
        self.convert_button.configure(disabledforeground="#c0c0c0")
        self.convert_button.configure(foreground="#ffffff")
        self.convert_button.configure(font="-family {Calibri} -size 14 -weight bold")
        self.convert_button.configure(text='''CONVERT''')
        self.convert_button.configure(relief='ridge')
        self.convert_button.configure(command=lambda: Ace_currency_convertor_support.convert())
        self.copy_button_tooltip = \
        ToolTip(self.convert_button, self.tooltip_font, '''Click to convert the amount''')

        #copy button
        self.copy_button = tk.Button(top)
        self.copy_button.place(height=27, relx=0.795, rely=0.414, width = 70)
        self.copy_button.configure(activebackground="#107aef")
        self.copy_button.configure(activeforeground="#ffffff")
        self.copy_button.configure(background="#107aef")
        self.copy_button.configure(disabledforeground="#c0c0c0")
        self.copy_button.configure(foreground="#ffffff")
        self.copy_button.configure(font="-family {Calibri} -size 14 -weight bold")
        self.copy_button.configure(text='''COPY''')
        self.copy_button.configure(relief='ridge')
        self.copy_button.configure(command=lambda: Ace_currency_convertor_support.copy())
        self.tooltip_font = "TkDefaultFont"
        self.copy_button_tooltip = \
        ToolTip(self.copy_button, self.tooltip_font, '''Click to copy the converted amount to clipboard''')

        #reset button
        self.reset_button = tk.Button(top)
        self.reset_button.place(height=33, width=105, relx=0.019, rely=0.810)
        self.reset_button.configure(activebackground="#107aef")
        self.reset_button.configure(activeforeground="#ffffff")
        self.reset_button.configure(background="#107aef")
        self.reset_button.configure(disabledforeground="#c0c0c0")
        self.reset_button.configure(foreground="#ffffff")
        self.reset_button.configure(font="-family {Calibri} -size 14 -weight bold")
        self.reset_button.configure(text='''RESET''')
        self.reset_button.configure(relief='ridge')
        self.reset_button.configure(command=lambda: Ace_currency_convertor_support.reset())
        self.copy_button_tooltip = \
        ToolTip(self.reset_button, self.tooltip_font, '''Click to RESET your username and API key''')
        

# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

if __name__ == '__main__':
    vp_start_gui()





